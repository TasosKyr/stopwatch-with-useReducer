{"ast":null,"code":"var _jsxFileName = \"/Users/tasosmac/Documents/experimental-repos/stopwatch-with-useReducer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./index.css\";\nimport { useReducer, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isRunning: false,\n  time: 0\n};\nexport default function App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const idRef = useRef(0);\n  useEffect(() => {\n    if (!state.isRunning) {\n      return;\n    }\n\n    idRef.current = setInterval(() => dispatch({\n      type: \"tick\"\n    }), 1000);\n    return () => {\n      clearInterval(idRef.current);\n      idRef.current = 0;\n    };\n  }, [state.isRunning]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch\",\n    children: [state.time, \"s\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: \"start\"\n        }),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: \"stop\"\n        }),\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: \"reset\"\n        }),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nHeWZQF70i6gi74f4bV5sAt74eU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tasosmac/Documents/experimental-repos/stopwatch-with-useReducer/src/App.js"],"names":["useReducer","useEffect","useRef","initialState","isRunning","time","App","state","dispatch","reducer","idRef","current","setInterval","type","clearInterval"],"mappings":";;;AAAA,OAAO,aAAP;AAEA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,MAAhC,QAA8C,OAA9C;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACS,OAAD,EAAUN,YAAV,CAApC;AACA,QAAMO,KAAK,GAAGR,MAAM,CAAC,CAAD,CAApB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,KAAK,CAACH,SAAX,EAAsB;AACpB;AACD;;AACDM,IAAAA,KAAK,CAACC,OAAN,GAAgBC,WAAW,CAAC,MAAMJ,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAf,EAAmC,IAAnC,CAA3B;AACA,WAAO,MAAM;AACXC,MAAAA,aAAa,CAACJ,KAAK,CAACC,OAAP,CAAb;AACAD,MAAAA,KAAK,CAACC,OAAN,GAAgB,CAAhB;AACD,KAHD;AAID,GATQ,EASN,CAACJ,KAAK,CAACH,SAAP,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,eACGG,KAAK,CAACF,IADT,oBAEE;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAMG,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAML,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAML,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAzBuBP,G;;KAAAA,G","sourcesContent":["import \"./index.css\";\n\nimport { useReducer, useEffect, useRef } from \"react\";\n\nconst initialState = {\n  isRunning: false,\n  time: 0\n};\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const idRef = useRef(0);\n\n  useEffect(() => {\n    if (!state.isRunning) {\n      return;\n    }\n    idRef.current = setInterval(() => dispatch({ type: \"tick\" }), 1000);\n    return () => {\n      clearInterval(idRef.current);\n      idRef.current = 0;\n    };\n  }, [state.isRunning]);\n\n  return (\n    <div className=\"stopwatch\">\n      {state.time}s\n      <div>\n        <button onClick={() => dispatch({ type: \"start\" })}>Start</button>\n        <button onClick={() => dispatch({ type: \"stop\" })}>Stop</button>\n        <button onClick={() => dispatch({ type: \"reset\" })}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}